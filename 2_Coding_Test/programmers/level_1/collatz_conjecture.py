# 문제: 프로그래머스 Lv.1 '콜라츠 추측'
# 설명: 1937년 Collatz란 사람에 의해 제기된 이 추측은, 주어진 수가 1이 될 때까지 다음 작업을 반복하면, 모든 수를 1로 만들 수 있다는 추측입니다. 
#       작업은 다음과 같습니다.
#       1-1. 입력된 수가 짝수라면 2로 나눕니다. 
#       1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다. 
#       2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다. 
#       예를 들어, 주어진 수가 6이라면 6 → 3 → 10 → 5 → 16 → 8 → 4 → 2 → 1 이 되어 총 8번 만에 1이 됩니다. 
#       위 작업을 몇 번이나 반복해야 하는지 반환하는 함수, solution을 완성해 주세요. 
#       단, 주어진 수가 1인 경우에는 0을, 작업을 500번 반복할 때까지 1이 되지 않는다면 –1을 반환해 주세요.
# 링크: https://school.programmers.co.kr/learn/courses/30/lessons/12943

# 풀이:
# 1. 처음 매개변수 num이 1이라면 곧바로 0을 return하도록 한다.
# 2. 그게 아니라면, 500번을 for문으로 반복하여 num이 짝수인지 홀수인지 검사한다.
# 3. 짝수라면 num을 2로 나누고, 홀수라면 곱하기 3을 한 후에 1을 더한다.
# 4. 별개의 if조건문을 활용하여 num이 1이 되었는지 이 때 확인한다.
# 5. 만약 1이 되었다면 몇번 수행했는지를 알기위하여 인덱스값 기준인 i에 1을 더 해 그 값을 return한다.
# 6. 만약 500을 했는데도 num이 1이 되지 못한다면 -1을 return하도록 한다.

def solution(num):

    if num == 1:
        return 0
    
    for i in range(500):
        if (num % 2) == 0:
            num = num / 2
        else:
            num = (num * 3) + 1
        
        if num == 1:
            return (i + 1)
        
    return -1