# 문제: 프로그래머스 Lv.1 '최소직사각형'
# 설명: 명함 지갑을 만드는 회사에서 지갑의 크기를 정하려고 합니다. 다양한 모양과 크기의 명함들을 모두 수납할 수 있으면서, 작아서 들고 다니기 편한 지갑을 만들어야 합니다.
#       이러한 요건을 만족하는 지갑을 만들기 위해 디자인팀은 모든 명함의 가로 길이와 세로 길이를 조사했습니다.
#       아래 표는 4가지 명함의 가로 길이와 세로 길이를 나타냅니다.
#       가장 긴 가로 길이와 세로 길이가 각각 80, 70이기 때문에 80(가로) x 70(세로) 크기의 지갑을 만들면 모든 명함들을 수납할 수 있습니다.
#       하지만 2번 명함을 가로로 눕혀 수납한다면 80(가로) x 50(세로) 크기의 지갑으로 모든 명함들을 수납할 수 있습니다. 이때의 지갑 크기는 4000(=80 x 50)입니다.
#       모든 명함의 가로 길이와 세로 길이를 나타내는 2차원 배열 sizes가 매개변수로 주어집니다. 
#       모든 명함을 수납할 수 있는 가장 작은 지갑을 만들 때, 지갑의 크기를 return 하도록 solution 함수를 완성해주세요.
# 링크: https://school.programmers.co.kr/learn/courses/30/lessons/86491

# 풀이
# 1. 결과에 필요한 최대 가로 길이(max_width)와 최대 세로 길이(max_height)를 0으로 초기화합니다.
# 2. for 반복문을 사용하여 주어진 명함 크기들(sizes)을 하나씩 확인합니다.
# 3. 반복문 안에서, 각 명함의 두 길이 중 더 큰 값을 가로(width)로, 더 작은 값을 세로(height)로 통일합니다.
# 4. 통일된 가로, 세로 길이를 현재까지의 최대 가로, 세로 길이와 비교하여 더 큰 값으로 갱신합니다.
# 5. 모든 명함을 확인한 후, 최종적으로 갱신된 max_width와 max_height를 곱하여 가장 작은 지갑의 넓이를 반환합니다.

def solution(number):
    answer = 0
    
    for i in range(0, len(number) - 2):
        for j in range(i + 1, len(number) - 1):
            for k in range(j + 1, len(number)):
                if(number[i] + number[j] + number[k] == 0):
                    answer += 1
    
    
    return answer